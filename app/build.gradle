apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def keyStore = file('gank.jks')

repositories {
    flatDir {
        dirs 'libs'
    }
}

android {

    compileSdkVersion rootProject.ext.androidCompileSdkVersion
    buildToolsVersion rootProject.ext.androidBuildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.androidApplicationId
        minSdkVersion rootProject.ext.androidMinSdkVersion
        targetSdkVersion rootProject.ext.androidTargetSdkVersion
        versionCode rootProject.ext.androidVersionCode
        versionName rootProject.ext.androidVersionName
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'              //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'MissingTranslation'
    }

    signingConfigs {
        release {
            storeFile keyStore
            storePassword 'gank666'
            keyAlias 'Gank'
            keyPassword '94a186'
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if(keyStore.exists()) {
                println "using johnnyshieh's key"
                signingConfig signingConfigs.release
            }
            applicationVariants.all { variant ->
                if (variant.buildType.name.equals('release')) {
                    variant.outputs.each { output ->
                        def outputFile = output.outputFile
                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
                            def fileName = "Gank_v${defaultConfig.versionName}_${releaseTime()}_${variant.flavorName}.apk"
                            output.outputFile = new File(outputFile.parent, fileName)
                        }
                    }
                }
            }

            productFlavors.all { flavor ->
                manifestPlaceholders.put("UMENG_CHANNEL_VALUE",name)
            }
        }

        productFlavors {
            fir {
            }
        }
    }
}

def dependeny = rootProject.ext.dependencies

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    apt dependeny['daggerCompiler']
    testCompile dependeny['junit']
    compile(name:'feedbacksdk', ext:'aar')
    compile dependeny['appcompat']
    compile dependeny['design']
    compile dependeny['recyclerView']
    compile dependeny['cardView']
    compile dependeny['dagger']
    compile dependeny['butterKnife']
    compile dependeny['rxJava']
    compile dependeny['rxAndroid']
    compile dependeny['retrofit']
    compile dependeny['converterGson']
    compile dependeny['adapterRxjava']
    compile dependeny['gson']
    compile dependeny['glide']
    compile dependeny['umengAnalytics']
    debugCompile dependeny['leakcanary']
    releaseCompile dependeny['leakcanaryNoOp']
    provided dependeny['javaxAnnotation']
}
