apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def keyStore = file('gank.jks')

repositories {
    flatDir {
        dirs 'libs'
    }
}

android {

    compileSdkVersion 25
    buildToolsVersion '25.0.0'

    defaultConfig {
        applicationId 'com.johnny.gank'
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 2
        versionName '1.1'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'              //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'MissingTranslation'
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    signingConfigs {
        release {
            storeFile keyStore
            storePassword 'gank666'
            keyAlias 'Gank'
            keyPassword '94a186'
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if(keyStore.exists()) {
                println "using johnnyshieh's key"
                signingConfig signingConfigs.release
            }
            applicationVariants.all { variant ->
                if (variant.buildType.name.equals('release')) {
                    variant.outputs.each { output ->
                        def outputFile = output.outputFile
                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
                            def fileName = "Gank_v${defaultConfig.versionName}_${releaseTime()}_${variant.flavorName}.apk"
                            output.outputFile = new File(outputFile.parent, fileName)
                        }
                    }
                }
            }

            productFlavors.all { flavor ->
                manifestPlaceholders.put("UMENG_CHANNEL_VALUE",name)
            }
        }

        productFlavors {
            fir {
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile "junit:junit:$junit_version"
    compile(name:'feedbacksdk', ext:'aar')

    // Support
    compile "com.android.support:appcompat-v7:$appcompat_version"
    compile "com.android.support:design:$design_version"
    compile "com.android.support:recyclerview-v7:$recycler_view_version"
    compile "com.android.support:cardview-v7:$card_view_version"

    // Dagger 2
    compile "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    // RxJava 2
    compile "io.reactivex.rxjava2:rxjava:$rxjava_version"
    compile "io.reactivex.rxjava2:rxandroid:$rxandroid_version"

    // RxFlux
    compile "com.johnny.rxflux:rxflux:$rxflux_version"

    // Retrofit
    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.squareup.retrofit2:converter-gson:$retrofit_version"
    compile "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"

    compile "com.google.code.gson:gson:$gson_version"
    compile "com.github.bumptech.glide:glide:$glide_version"

    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    // Anko
    compile "org.jetbrains.anko:anko-commons:$anko_version"

    compile "com.umeng.analytics:analytics:latest.integration"

    // LeakCanary
    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary_version"

    // log
    compile "com.jakewharton.timber:timber:$timber_version"
    compile "com.github.tianzhijiexian:logger:$logger_version"
}
